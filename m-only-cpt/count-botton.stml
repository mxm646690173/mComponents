<template name='count-botton'>
	<view class="">
		<button :style="this.buttonStyle()" onclick='qichenCountButtonClick'>
			{{ type ? text : defShowText}}
		</button>
	</view>
</template>
<script>
export default {
	name: "count-botton",
	install() {

	},
	data() {
		return {
			text: '',
			type: false,
			timer: '',
			addOacity: false
		};
	},
	computed: {
		defShowText() {
			if (this.props['start-count'] == 'start' && !this.data.type) {
				this.startCount();
				return this.props['countTime'] + this.props['start-text'];
			} else {
				return this.props['countText']
			}
		},
	},
	methods: {
		qichenCountButtonClick() {
			if (this.data.text == '' || this.data.text == this.props['countText']) {
				this.data.type = false;
				this.data.addOacity = true;
				this.fire('button-click');
				// 手动添加循环监听 startCount 状态,每100毫秒进行1次检查
				// 由于是需要进行开始倒计时,所以,没有获取到需要的状态,就需要持续的进行
				this.addListenerType()
			}
		},
		addListenerType() {
			if (!this.props['start-count']) {
				setTimeout(() => {
					this.update();
					this.addListenerType()
				}, 100);
			}
		},
		startCount() {
			let time = this.props['countTime'];
			this.data.text = time + this.props['start-text'];
			this.data.type = true;
			const _run = () => {
				this.data.text = time + this.props['start-text'];
				if (this.props['start-count'] == 'stop' || this.props['start-count'] == 'reset') {
					clearTimeout(this.data.timer);
				} else {
					if (time >= 1) {
						time--;
						this.data.timer = setTimeout(() => {
							_run();
						}, 1000);
					} else {
						this.data.addOacity = false;
						this.data.text = this.props['countText'];
						this.update();
					}
				}
				if (this.props['start-count'] == 'reset') {
					this.data.addOacity = false;
					this.data.text = this.props['countText'];
					this.update();
				}
			}
			_run()
		},
		buttonStyle: function () {
			let str = '';
			str = `padding-left:0;padding-right:0;height:${this.props['height'] || 20}px;font-size:${this.props['fontSize'] || 13}px;line-height:${this.props['fontSize'] || 13}px;background-color:${this.props['backgroundColor'] || '#fff'};color:${this.props['color'] || '#000'};`
			if (this.props['isShowBorder']) {
				str = `${str}border-radius:${this.props['borderRadius'] || 5}px;border-color:${this.props['borderColor'] || '#000'};`
			}
			if (this.data.addOacity) {
				str = `${str}opacity:0.5;`
			} else {
				str = `${str}opacity:1;`
			}
			return str
		}
	}
};
</script>
<style scoped>
.bg-fff {
	background: #fff;
}
</style>